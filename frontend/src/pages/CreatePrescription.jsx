import React, { useState, useRef, useEffect } from "react";
import PrescriptionForm from "../components/PrescriptionForm";
import PrescriptionPreview from "../components/PrescriptionPreview";
import html2pdf from "html2pdf.js";
import { uploadPdf, deletePdf } from "../utility/uploadPdf";
import { addDoc, collection } from "@firebase/firestore";
import { Firestore } from "../firebaseConfig";
import toast from "react-hot-toast";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux"; 
import { getAuth } from "firebase/auth";
import { FaAnglesLeft } from "react-icons/fa6";

const CreatePrescription = () => {
  const [prescriptionId, setPrescriptionId] = useState(null);
  const navigate = useNavigate();
  const user = useSelector((state) => state.user.user); 
  const auth = getAuth();
  const currentUser = auth.currentUser;

  const [formData, setFormData] = useState({
    patientName: "",
    age: "",
    sex: "",
    contact: "",
    city: "",
    bmi: "",
    weight: "",
    height: "",
    additionalinfo: "",
    diagnosis: "",
    investigationtest: "",
    medicines: [
      {
        name: "",
        dosage: {
          morning: false,
          afternoon: false,
          evening: false,
          night: false,
          beforeFood: false,
          afterFood: false,
        },
        duration: {
          durationDays: "",
          durationUnit: "day's",
        },
        advice: "",
      },
    ],
    remarks: "",
    followup: "",
    drugAllergies: [],
    otherDrugAllergies: "",
    healthIssues: [],
    otherHealthIssues: "",
  });

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [uploadLoading, setUploadLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [progressMessage, setProgressMessage] = useState("");

  const prescriptionPreviewRef = useRef();

  useEffect(() => {
    if (!currentUser) {
      toast.error("Please log in to access this page.");
      navigate("/");
    } else {
      if (user?.role === "admin") {
        toast.error("Only doctors can access this feature.");
        navigate("/");
      }
    }
  }, [user, navigate, currentUser]);
  


 const generatePrescriptionPDF = () => {
  const element = prescriptionPreviewRef.current;

  const footer = document.createElement("div");
  footer.innerHTML = `
    <p style="font-size: 12px; text-align: center; margin-top: 20px; ">
      <strong>Digital prescription generated by DocSync.</strong><br />
      <span>Note: DocSync is not responsible for the accuracy or validity of the prescriptions provided by doctors.</span>
      <div style="height:10px"></div>
    </p>
  `;

  element.appendChild(footer);

  const options = {
    filename:"prescription.pdf",
    image: { type: "jpeg", quality: 0.7 },
    html2canvas: {
      scale: 2,
      useCORS: true,
      backgroundColor: "#ffffff",
    },
    jsPDF: {
      unit: "mm",
      format: "a4",
      orientation: "portrait",
      compress: true,
    },
    margin: [10, 10, 10, 10],
    pagebreak: {
      mode: ["auto"],
    },
  };

  return new Promise((resolve, reject) => {
    html2pdf()
      .from(element)
      .set(options)
      .outputPdf("blob")
      .then((pdfBlob) => {
        element.removeChild(footer);
        resolve(pdfBlob);
      })
      .catch((error) => {
        element.removeChild(footer);
        reject(error);
      });
  });
};

const downloadPrescriptionPDF = async() => {
  const element = prescriptionPreviewRef.current;
  const footer = document.createElement("div");
  footer.innerHTML = `
    <p style="font-size: 12px; text-align: center; margin-top: 20px; ">
      <strong>Digital prescription generated by DocSync.</strong><br />
      <span>Note: DocSync is not responsible for the accuracy or validity of the prescriptions provided by doctors.</span>
      <div style="height:10px"></div>
    </p>
  `;

  element.appendChild(footer);
  await new Promise((resolve) => setTimeout(resolve, 500));
  const options = {
    filename:"prescription.pdf",
    image: { type: "jpeg", quality: 0.7 },
    html2canvas: {
      scale: 2,
      useCORS: true,
      backgroundColor: "#ffffff",
    },
    jsPDF: {
      unit: "mm",
      format: "a4",
      orientation: "portrait",
      compress: true,
    },
    margin: [10, 10, 10, 10],
    pagebreak: {
      mode: ["auto"],
    },
  };
  html2pdf()
  .from(element)
  .set(options)
  .save()
  .finally(() => {
    element.removeChild(footer);
  });

};

const handleSubmit = async () => {
  try {
    setIsModalOpen(false);
    setUploadLoading(true);

    setProgress(10);
    setProgressMessage("Initializing submission...");

    const newPrescriptionId = `PRES-${Date.now()}`;
    setPrescriptionId(newPrescriptionId);

    await new Promise((resolve) => setTimeout(resolve, 500));

    setProgress(30);
    setProgressMessage("Generating prescription pdf...");

    const pdfBlob = await generatePrescriptionPDF();

    setProgress(60);
    setProgressMessage("Uploading prescription pdf...");

    const uploadResult = await uploadPdf(pdfBlob);

    if (!uploadResult) {
      throw new Error("PDF upload failed");
    }

    setProgress(80);
    setProgressMessage("Saving prescription to database...");

    const prescriptionData = {
      doctoruid: user?.uid,
      patientName: formData?.patientName,
      dateCheckIn: new Date().toISOString(),
      diagnosis: formData?.diagnosis,
      mobileNumber: formData?.contact,
      prescriptionId: newPrescriptionId,
      imageUrl: uploadResult, 
    };
  
    
    setProgress(90);
    setProgressMessage("Finalizing submission...");
    
    await  downloadPrescriptionPDF();
    await addDoc(collection(Firestore, "prescriptions"), prescriptionData);

    setProgress(100);
    setProgressMessage("Submission complete!");

    toast.success("Prescription submitted successfully!");
    navigate("/doctor/dashboard?tab=prescriptions");
  } catch (error) {
    console.error("Error submitting prescription:", error);
    toast.error("Failed to submit prescription");
  } finally {
    setUploadLoading(false);
  }
};

  const handleFormChange = (updatedData) => {
    setFormData(updatedData);
  };

  return (
    <div className="w-full min-h-screen bg-gradient-to-r from-blue-50 via-white to-blue-50 py-8 font-rubik overflow-x-auto">
      <div className="container mx-auto p-4">
        {/* Header */}
        <div className="flex justify-left mb-6">
          <button
            onClick={() => navigate("/doctor/dashboard?tab=prescriptions")}
            className="bg-blue-500 text-white p-4 py-2 rounded-lg hover:bg-blue-600 transition flex items-center justify-center gap-1"
          >
            <FaAnglesLeft />
            Dashboard
          </button>
        </div>

        {/* Heading */}
        <h1 className="text-4xl font-extrabold text-center text-blue-600 mb-8 font-poppins">
          Create Prescription
        </h1>

        <div className="flex flex-col md:flex-row gap-6">
          {/* Prescription Form Section */}
          <div className="w-full md:w-1/2 bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-semibold text-blue-500 mb-4">
              Prescription Form
            </h2>
            <PrescriptionForm onChange={handleFormChange} formData={formData} />
          </div>

          {/* Prescription Preview Section */}
          <div className="w-full md:w-1/2 bg-gray-100 rounded-lg shadow-md p-6 sticky top-8">
            <h2 className="text-2xl font-semibold text-green-500 mb-4">
              Preview
            </h2>
            <PrescriptionPreview
              ref={prescriptionPreviewRef}
              formData={formData}
              prescriptionId={prescriptionId}
            />
          </div>
        </div>

        {/* Submit Button */}
        <div className="flex justify-center mt-8">
          <button
            onClick={() => setIsModalOpen(true)}
            className="bg-blue-500 text-white p-4 py-2 rounded-lg hover:bg-blue-600 transition flex items-center justify-center"
          >
            Submit Prescription
          </button>
        </div>

        {/* Modal */}
        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-6 ">
            <div className="bg-white rounded-lg p-6 max-w-lg mx-auto w-full ">
              <h2 className="text-xl font-bold mb-4">Confirm Submission</h2>
              <p>Are you sure you want to submit this prescription?</p>
              <div className="flex justify-end gap-4 mt-6">
                <button
                  onClick={() => setIsModalOpen(false)}
                  className="bg-gray-300 text-gray-700 p-2 px-4 rounded-lg hover:bg-gray-400"
                >
                  No
                </button>
                <button
                  onClick={handleSubmit}
                  className={`bg-green-500 text-white p-2 px-4 rounded-lg hover:bg-green-600 ${
                    uploadLoading && "opacity-50 cursor-not-allowed"
                  }`}
                  disabled={uploadLoading}
                >
                  {uploadLoading ? "Submitting..." : "Yes"}
                </button>
              </div>
            </div>
          </div>
        )}

        {uploadLoading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-6">
            <div className="bg-white rounded-lg p-6 max-w-lg mx-auto w-full m-4">
              <h2 className="text-xl font-bold mb-4">
                Submitting Prescription
              </h2>
              <p className="text-gray-600 mb-4">{progressMessage}</p>
              <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                <div
                  className="bg-blue-500 h-4 transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="text-gray-600 mt-4 text-center">
                {progress}% complete
              </p>
            </div>
          </div>
        )}


      </div>
    </div>
  );
};

export default CreatePrescription;
